# Config file for train_and_test.py for Imagenette.
# =========================================================================== #
#                                   Meta Params                               #
# =========================================================================== #
meta:
  exp_id: 8
  gpu_id: '0, 1'
  seed: 2020
  model_name: null        # If set to null, model name is auto-generated
  # This relative path is set to Ray's `local_dir/name`
  save_path: '/home/user/rand-smooth/save/'
  data_path: '~/data/'
  load_pickle: False
  network: 'resnet'
  pretrained: True
  dataset: 'cifar10'
  augment: False           # Whether to augment training data
  normalize: null
  shuffle: True           # Should always be True for consistency
  val_size: 0.1           # Validation set split
  method: 'rand'           # 'none', 'rand', 'pgd', 'fgsm', 'rand-pgd'
  test:   # Testing params
    batch_size: 100
    num_samples: 1000
    save_output: True
    save_name: 'grad-hinge-sgm16'
    save_adv: False           # Save generated adversarial examples
    save_adv_out: False      # Save logits output for adversarial examples
    save_clean_out: False    # Save logits output for clean samples
    clean_only: False        # Evaluate model on clean data only
    adv_only: True
    # num_conf_repeats: 10
  train:  # Training params
    batch_size: 128
  valid:  # Validation params
    batch_size: 100
  num_workers: 16
  console_out: True

# =========================================================================== #
#                                  Attack Params                              #
# =========================================================================== #
attack:
  method: 'pgd'   # 'pgd', 'opt', 'auto'
  p: 'inf'
  # save_grad_name: 'save/grad_mean-hinge-fixed.pkl'
  save_grad: True
  # compute_grad_var: True

# Parameters for pgd attack
pgd:
  random_start: False
  loss_func: 'hinge'   # 'hinge', 'hinge', 'logits'
  gap: 1.0e+9    # Gap parameter of hinge loss
  targeted: False
  # clipping values on the perturbed sample (use null for no clipping)
  clip: [0., 1.]
  # init_mode: 1
  num_restarts: 1
  epsilon: 0.06274509803
  num_steps: 1
  step_size: 0.005
  # step_size: 0.01568
  # step_size: 0.07843137
  # maximin: 10
  # momentum:
  #   mu: 1.
  #   # decay: 'linear'
  #   normalize: True
  #   vr: 'basic'
  sgm_gamma: 0.5
  # linbp_layer: [4, 1]
  # report_steps: [100, 200, 300, 400, 500, 600, 700, 800, 900]

# =========================================================================== #
#                             Random Transform Params                         #
# =========================================================================== #
rand:
  test:
    rule: 'mean_probs'
    num_draws: 40
    tf_order: 'random'
    # tf_order: 'fixed'
    # fix_seed: True
    # fix_order_only: True
  attack:
    rule: 'mean_logits'
    num_draws: 16
    tf_order: 'fixed'
    # fix_seed: True
    # fix_order_only: True
  clip: [0., 1.]
  # set_all_p: 1.
  subset_size: 7
  # subset_size: 14
  # same_on_batch: True
  use_saved_transforms: True
  transforms: ['affine', 'boxblur', 'colorjitter', 'crop', 'pepper',
                'hsv', 'erase', 'fft', 'gamma', 'gaussblur',
                'hflip', 'jpeg', 'lab', 'laplacian', 'medblur', 'graymix',
                'motionblur', 'normal', 'gray1', 'poisson', 'gray',
                'precision', 'salt', 'sharp', 'sobel', 'solarize', 'speckle',
                'swirl', 'gray2', 'uniform', 'vflip', 'xyz', 'yuv']
  # No noise injection
  # transforms: ['affine', 'boxblur', 'colorjitter', 'crop', 'hsv', 'fft', 'gamma',
  #              'gaussblur', 'hflip', 'jpeg', 'lab', 'laplacian', 'medblur', 'graymix',
  #              'motionblur', 'gray1', 'gray', 'precision', 'sharp', 'sobel',
  #              'solarize', 'swirl', 'gray2', 'vflip', 'xyz', 'yuv']
  # transforms: ['affine', 'colorjitter', 'erase', 'fft', 'gamma', 'gaussblur',
  #              'hflip', 'jpeg', 'laplacian', 'medblur', 'motionblur', 'poisson',
  #              'precision', 'salt', 'sharp', 'sobel', 'solarize', 'vflip']
  affine:
    alpha: 0.5
  boxblur:
    p: 0.0
  colorjitter:
    alpha: 0.5
  crop:
    alpha: 0.
  erase:
    alpha: 0.2680
  fft:
    alpha: 0.5
  gamma:
    alpha: 0.5
  gaussblur:
    p: 0.3
  gaussblur_same:
    p: 0.322
    kernel_size: 5
    sigma: 2.5
  gray:
    p: 0.3
  gray1:
    p: 0.3
  gray2:
    p: 0.3
  graymix:
    alpha: 0.3
  hflip:
    p: 0.3859
  hsv:
    alpha: 0.3
  jpeg:
    alpha: 0.5
  lab:
    alpha: 0.3
  laplacian:
    p: 0.5163
    kernel_size: 3
  medblur:
    p: 1.
    kernel_size: 3
  motionblur:
    p: 0.6901
    kernel_size: 3
    angle: 90.0
    direction: 1.0
  normal:
    alpha: 0.
  pepper:
    alpha: 0.    # drop rate
  poisson:
    alpha: 0.5
  precision:
    alpha: 0.221
  salt:
    alpha: 0.5
  sharp:
    alpha: 0.5
  sobel:
    p: 0.2663
  solarize:
    p: 0.4244
  speckle:
    alpha: 0.
  swirl:
    alpha: 0.
  uniform:
    alpha: 0.
  vflip:
    p: 0.5825
  xyz:
    alpha: 0.3
  yuv:
    alpha: 0.3
  save_transformed_img: False

diversity:
  method: null
  # method: ['agreement']
  batch_size: 4
