# Config file for train.py

# ============================= meta parameters ============================= #
meta:
  exp_id: 99             # experiment id
  model_name: null      # model name. If null, automatically generate it.
  save_path: './'       # path to save model weights
  data_path: '~/data/imagenette'  # path to dataset
  seed: 2020            # set random seed
  gpu_id: '1'           # set id of GPU to use (e.g., '0' or '0, 1')
  dataset: 'imagenette'
  classes: [0, 100, 200, 300, 400, 500, 600, 700, 800, 900]
  normalize: # ImageNet
    mean: [0.485, 0.456, 0.406]
    std: [0.229, 0.224, 0.225]
  # normalize: null
  network: 'resnet34'
  pretrained: True
  val_size: 0.1
  batch_size: 20        # training and evaluation batch size
  epochs: 1            # total number of epochs to train
  optimizer: 'sgd'
  # learning_rate: 1.0e-1  # learning rate
  learning_rate: 1.0e-2
  l2_reg: 5.0e-4         # L2-regulardization or weight decay parameter
  # l2_reg: 0.
  augment: False
  save_best_only: True   # if True, only save best model
  save_epochs: 1         # used when <save_best_only> is False. Save model every specified epochs
  lr_scheduler: 'step'   # learning rate schedule (options: null, 'step', 'cyclic')
  method: 'none'         # training method (options: 'pgd', 'fgsm', 'rand', 'pgd-rand', 'none' = normal training)

# =================== parameters for adversarial training =================== #
at:
  random_start: True    # if True, use random start
  loss_func: 'ce'       # loss function for generating adversarial examples (options: 'ce', 'hinge', 'clipped_ce', 'trades')
  use_diff_rand_eps: False    # if True, use random start with perturbation size of <rand_eps> instead of <epsilon>
  rand_eps: 0
  clip: [0., 1.]            # if True, clip adversarial input to [0, 1]
  beta: 0               # TRADES parameters

  # parameters for AT with l-inf norm
  p: 'inf'                  # specify lp-norm to use
  num_steps: 10
  epsilon: 0.03137254901    # 8/255
  step_size: 0.00784313725  # 2/255
  # epsilon: 0.03921568627    # 10/255
  # step_size: 0.00980392156  # 2.5/255
  # epsilon: 0.06274509803    # 16/255
  # step_size: 0.0156862745   # 4/255

  # p: '2'
  # epsilon: 1.0
  # num_steps: 10
  # step_size: 0.25

  # parameters for ATES
  early_stop: False         # if True, use AT with early stop (ATES)
  init_gap: 0               # initial softmax probability gap
  final_gap: 1              # final softmax probability gap
  step_gap: [30, 45, 60]    # specify schedule for probability gap
  linear_gap: null
  # step_gap: null
  # linear_gap: [30, 70]

  # parameters for Dynamic AT
  use_fosc: False           # if True, use Dynamic AT
  fosc_max: 0.5             # maximum (initial) threshold for optimality gap
  dynamic_epoch: 30         # number of epochs that threshold linearly drops to zero

# ===================== parameters for random transform ===================== #
rand:
  rule: 'mean_probs'  # decision rule that combines all the outputs
  # rule: null
  temperature: 1
  fix_seed: null   # options: 'batch', 'all', null
  seed: null    # seed to set when fix_seed is 'all'
  clip: null    # clip after all transformations are applied
  # clip: [-1., 1.]
  # clip: [0., 1.]
  num_draws: 8
  # set_all_p: 1.0
  set_all_p: null
  transforms: ['hflip', 'gamma', 'drop_pixel', 'colorjitter', 'normal', 'affine', 'grayscale']
  # transforms: ['erase', 'hflip', 'vflip', 'gamma', 'drop_pixel', 'colorjitter', 'normal', 'affine', 'grayscale']
  # transforms: ['hflip', 'vflip', 'normal', 'motionblur', 'colorjitter', 'gamma', 'grayscale', 'drop_pixel', 'gaussblur', 'affine', 'sobel']
  # transforms: ['edsr']
  # transforms: ['hflip', 'vflip', 'gamma', 'edsr', 'drop_pixel', 'colorjitter', 'normal', 'affine', 'grayscale']
  affine:
    p: 1.
    dist: 'uniform'
    alpha: 0.3
  boxblur:
    p: 0.2
    kernel_size: 5
  colorjitter:
    p: 1.
    dist: 'uniform'
    alpha: 0.5
  drop_pixel:
    p: 1.
    drop_rate: 0.3
  erase:
    p: 1.
    # scale: [0.1, 0.2]    # scale of area
    scale: [0.0000001, 0.25]
    ratio: [0.5, 2.0]    # aspect ratio of the erasing box
  gamma:
    p: 1.
    dist: 'uniform'
    alpha: 0.3
  gaussblur:
    p: 0.5
    kernel_size: 5
    sigma: 0.25
  grayscale:
    p: 0.3
  hflip:
    p: 0.5
  laplacian:
    p: 0.2
    kernel_size: 5
  medblur:
    p: 0.2
    kernel_size: 5
  motionblur:
    p: 0.2
    kernel_size: 5
    angle: 90.0
    direction: 1.0
  normal:
    p: 1.
    mean: 0.0
    std: 0.25
    # clip: [0., 1.]
    clip: null
  rotate:
    dist: 'uniform'
    alpha: 30
  scale:
    dist: 'uniform'
    alpha: 0.3
  shear:
    dist: 'uniform'
    alpha: 0.3
  sobel:
    p: 0.3
  translate:
    dist: 'uniform'
    alpha: 0.3
  uniform:
    p: 0.5
    range: [-0.2, 0.2]
  vflip:
    p: 0.5
  edsr:
    p: 0.5
